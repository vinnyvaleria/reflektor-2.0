generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite" // this will be updated to postgresql right before deployment
    url      = env("DATABASE_URL")
}

// user accounts for progress tracking
model User {
    id           String @id @default(cuid())
    email        String @unique
    username     String @unique
    passwordHash String

    // profile info
    displayName String?
    avatar      String?

    // game progress 
    storyProgress     Json @default("{}") // {level: {completed: bool, stars: int, bestSteps: int, bestTime: int}}
    highestUnlocked   Int  @default(1) // track highest unlocked level
    totalFreeplayWins Int  @default(0)
    bestFreeplayScore Int  @default(0)

    // story mode statistics for leaderboard
    totalStoryLevelsCompleted  Int    @default(0)
    averageStoryCompletionTime Float? // average seconds per level
    totalStoryTime             Int    @default(0) // total time spent in story mode

    // account management
    emailVerified Boolean  @default(false)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // relations
    gameSessions       GameSession[]
    leaderboardEntries LeaderboardEntry[]

    @@map("users")
}

// game session schema -> one session completed = one submission to global leaderboard
model GameSession {
    id     String  @id @default(cuid())
    userId String? // Link to user account (optional for guests)
    user   User?   @relation(fields: [userId], references: [id])

    playerName String? // REQUIRED for guests in freeplay
    gameMode   GameMode    @default(FREEPLAY)
    difficulty Difficulty? // only used for freeplay mode

    // session timing and limits
    startTime DateTime   @default(now())
    endTime   DateTime?
    timeLimit Int? // seconds (3 minutes for freeplay)
    status    GameStatus @default(PLAYING)

    // game progress tracking
    puzzlesCompleted Int  @default(0) // how many puzzles completed in this session
    totalSteps       Int  @default(0) // total steps taken across all puzzles
    roundsUsed       Int  @default(0) // rounds used (when hitting obstacles)
    score            Int? // final calculated score

    // story mode - for 3-star rating system
    starsEarned    Int? // 1-3 stars for story mode
    timeToComplete Int? // time taken to complete all unlocked levels

    // current puzzle state (for active sessions)
    currentPuzzle   Json? // stores current map data
    currentPosition Json? // stores player position {row, col, mirroredCol}
    helperUsage     Json  @default("[]") // tracks which helpers were used

    // story mode specific
    storyLevel Int? // which story level (1-30)

    createdAt DateTime @default(now())

    // index for finding user's active sessions
    @@index([userId, status])
    @@map("game_sessions")
}

// global leaderboard entries
model LeaderboardEntry {
    id     String  @id @default(cuid())
    userId String?
    user   User?   @relation(fields: [userId], references: [id])

    playerName String // display name for leaderboard
    gameMode   GameMode
    difficulty Difficulty?

    // scores
    score            Int
    puzzlesCompleted Int? // for freeplay
    storyLevel       Int? // for story mode (highest level reached)
    totalSteps       Int
    roundsUsed       Int
    timeTaken        Int // in seconds

    averageTimePerLevel  Float? // for story mode leaderboard
    totalLevelsCompleted Int? // for story mode leaderboard

    // metadata
    achievedAt DateTime @default(now())

    // indexes for leaderboard queries
    @@index([gameMode, score])
    @@index([gameMode, averageTimePerLevel])
    @@map("leaderboard_entries")
}

// pre-built story mode puzzles (30 levels of 9x9 grids)
model StoryMap {
    id          String  @id @default(cuid())
    level       Int     @unique // 1 to 30
    mapData     Json // 9x9 grid with obstacles and positions
    name        String
    description String?
    targetSteps Int? // target steps for 3 stars
    targetTime  Int? // target time for 3 stars

    // level progression requirements
    requiredLevel Int     @default(1) // minimum level to unlock (for future branching)
    isUnlocked    Boolean @default(true) // for special/bonus levels

    createdAt DateTime @default(now())

    @@map("story_maps")
}

// different game modes available
enum GameMode {
    FREEPLAY // time-limited, auto-generated puzzles
    STORY // 30 pre-built puzzles, progressive difficulty
}

// possible states for a game session
enum GameStatus {
    PLAYING // currently playing
    COMPLETED // successfully finished
    TIME_UP // ran out of time (freeplay only)
    PAUSED // game paused
    ABANDONED // player left without completing
}

// difficulty levels for freeplay mode
enum Difficulty {
    EASY // 5x5 grid
    MEDIUM // 7x7 grid  
    HARD // 9x9 grid
}
